{"version":3,"sources":["SingleColor.js","App.js","index.js"],"names":["SingleColor","hexColor","weight","index","useState","alert","setAlert","console","log","useEffect","clipBoard","setTimeout","clearTimeout","className","style","backgroundColor","onClick","navigator","clipboard","writeText","App","color","setColor","error","setError","Values","all","list","setList","onSubmit","e","preventDefault","colors","type","placeholder","value","onChange","target","border","map","key","hex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAgFeA,EAxCK,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,SAASC,EAAkB,EAAlBA,OAAOC,EAAW,EAAXA,MAAW,EAEtBC,oBAAS,GAFa,mBAExCC,EAFwC,KAElCC,EAFkC,KAG/CC,QAAQC,IAAIP,GAqBZ,OAZAQ,qBAAU,WACR,IAAIC,EAAYC,YAAW,WACzBL,GAAS,KACT,KACF,OAAO,WACLM,aAAaF,MAEf,CAACL,IAUD,6BAASQ,UAAS,gBAAWV,EAAM,IAAM,eAAiBW,MAAO,CAAEC,gBAAgB,IAAD,OAAMd,IAAce,QAvB5E,WAC1BV,GAAS,GACTW,UAAUC,UAAUC,UAApB,WAAkClB,MAsBhC,uBAAGY,UAAU,iBAAiBX,EAA9B,KACA,uBAAGW,UAAU,eAAb,IAA6BZ,GAG5BI,GAAS,uBAAGQ,UAAU,SAAb,yB,gBC/BDO,MAvCf,WAAe,MAEYhB,mBAAS,IAFrB,mBAENiB,EAFM,KAEAC,EAFA,OAGalB,oBAAS,GAHtB,mBAGNmB,EAHM,KAGCC,EAHD,OAIUpB,mBAAS,IAAIqB,IAAO,WAAWC,IAAI,KAJ7C,mBAINC,EAJM,KAIDC,EAJC,KAmBb,OACA,6BACE,6BAASf,UAAU,aACjB,+CACA,0BAAMgB,SAhBW,SAACC,GACpBA,EAAEC,iBACF,IACE,IAAMC,EAAS,IAAIP,IAAOJ,GAAOK,IAAI,IACrCnB,QAAQC,IAAIwB,GACZJ,EAAQI,GACT,MAAMT,GACLC,GAAS,GACTjB,QAAQC,IAAIe,MASV,2BAAOU,KAAK,OAAOC,YAAY,UAAUC,MAAOd,EAAOe,SAAU,SAACN,GAAD,OAAKR,EAASQ,EAAEO,OAAOF,QAAQrB,MAAO,CAACwB,OAAQf,EAAQ,gBAAkB,qBAC1I,4BAAQU,KAAK,SAASpB,UAAU,OAAhC,YAGJ,6BAASA,UAAU,UAChBc,EAAKY,KAAI,SAACJ,EAAMhC,GACf,OACE,kBAAC,EAAD,eAAaqC,IAAKrC,GAAWgC,EAA7B,CAAoChC,MAAOA,EAAOF,SAAUkC,EAAMM,aC9B5EC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.bd62da46.chunk.js","sourcesContent":["//way1:using rgb\r\n\r\n// import React, { useState, useEffect } from 'react'\r\n// import rgbToHex from './utils'\r\n\r\n// //in each color we have rgb (is an array) and weight and we add the index parameter ourself\r\n// //we can use props instead of destructuring here\r\n// //rgb and weight properties are inside the values.js library\r\n// //we can call the below property hex or anything like hexColor\r\n// const SingleColor = ({rgb,weight,index}) => {\r\n\r\n//   const [alert,setAlert] = useState(false)  //this state is just for receiving alert-nothing necessary\r\n  \r\n//   console.log(rgb)  //e.g. [3,3,3]\r\n//   const bcg = rgb.join(\",\")   //seperate the 3 part of rgb with ,\r\n//   console.log(bcg)    //e.g. 3,3,3\r\n\r\n//   const hex = rgbToHex(...rgb)\r\n\r\n//   return (\r\n//     // we have a className of color\r\n//     <article className=\"color\" style={{ backgroundColor: `rgb(${bcg})` }}>\r\n//       <p className='percent-value'>{weight}%</p>\r\n//       {/* we have hex property that we can use instead of rgb but this is not showing the hex colors */}\r\n//       {/* <p className='color-value'>{hex}</p>   */}\r\n//       <p className='color-value'>{hex}</p> \r\n//     </article>\r\n//   )\r\n// }\r\n\r\n// export default SingleColor\r\n\r\n\r\n\r\n//way2: using hex--we don't need utils.js\r\n\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\n\r\nconst SingleColor = ({hexColor,weight,index}) => {\r\n\r\n  const [alert,setAlert] = useState(false)  //this state is for the message of the \"copied to clipboard\"\r\n  console.log(hexColor)\r\n\r\n  //click on the color to copy text to the clipboard\r\n  const handleClipboardText = () =>{\r\n    setAlert(true);\r\n    navigator.clipboard.writeText(`#${hexColor}`)    //navigator is an object and writeText is a method--this line is js for copying text to clipboard\r\n  }\r\n\r\n  //to remove the clipboard message--we use setTimeout not setInterval since setTimeout do the function once but setInterval do it repeatedly\r\n  useEffect(()=>{\r\n    let clipBoard = setTimeout(()=>{\r\n      setAlert(false)   //all the \"copied to clipboard\" must be disappear except the one with the message then remove the one with the message after 3s\r\n    },3000)\r\n    return(()=>{   //with return we do the cleaning--3s cleaning happens in the above line not here\r\n      clearTimeout(clipBoard)\r\n    })\r\n  },[alert])    //once the alert changes this setTimeOut will work\r\n\r\n\r\n\r\n\r\n  return (\r\n    \r\n    // <article className=\"color\" style={{ backgroundColor: `#${hexColor}` }}>\r\n    //instead of the above line we write a below line--we add two classNames with condition--if we are on darker colors (darker than 10% ) then we change what we write on the color from black to white\r\n    //we pass index={index in App.js}\r\n    <article className={`color ${index>10 && \"color-light\"}`} style={{ backgroundColor: `#${hexColor}` }} onClick={handleClipboardText}>\r\n      <p className='percent-value'>{weight}%</p>\r\n      <p className='color-value'>#{hexColor}</p> \r\n\r\n      {/* adding the color to the clipboard and write \"copied to clipboard\" and after 3 seconds the message will be disappear --we use alert state */}\r\n      {alert && <p className='alert'>copied to clipboard</p>}\r\n\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default SingleColor","import React, { useState } from 'react'\r\nimport SingleColor from './SingleColor'\r\nimport Values from 'values.js'\r\n\r\nfunction App() {\r\n  //states\r\n  const [color,setColor] = useState('');  //what user type in the input--empty string\r\n  const [error, setError] = useState(false);  //when user doesn't write the right hex number, the input box will be ready means error and do nothing\r\n  const [list,setList] = useState(new Values('#f15025').all(10))\r\n\r\n\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault()\r\n    try{\r\n      const colors = new Values(color).all(10)  //weight=10 means the gaps between percentages are 10\r\n      console.log(colors)   //we receive the 20 shadows of the color\r\n      setList(colors)  \r\n    }catch(error){\r\n      setError(true)\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  return(\r\n  <div>\r\n    <section className='container'>\r\n      <h3>color generator</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" placeholder='#f15025' value={color} onChange={(e)=>setColor(e.target.value)} style={{border: error ? \"1px solid red\" : \"1px solid white\"}}/>\r\n        <button type=\"submit\" className=\"btn\">submit</button>\r\n      </form>\r\n    </section>\r\n    <section className='colors'>\r\n      {list.map((value,index)=>{\r\n        return(\r\n          <SingleColor key={index} {...value} index={index} hexColor={value.hex}/>\r\n        )\r\n      })}\r\n    </section>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}